/** ============================================================================
MIT License

Copyright (c) 2023-2025 Institute for Automotive Engineering (ika), RWTH Aachen University

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
============================================================================= */

/** Auto-generated by https://github.com/ika-rwth-aachen/etsi_its_messages -----
python3 \
  utils/codegen/codegen-py/asn1ToConversionHeader.py \
  asn1/raw/cam_en302637_2/CAM-PDU-Descriptions.asn \
  asn1/raw/cam_en302637_2/cdd/ITS-Container.asn \
  -t \
  cam \
  -o \
  etsi_its_conversion/etsi_its_cam_conversion/include/etsi_its_cam_conversion
----------------------------------------------------------------------------- */

/** ASN.1 Definition -----------------------------------------------------------
ProtectedCommunicationZone ::= SEQUENCE {
    protectedZoneType       ProtectedZoneType,
    expiryTime TimestampIts OPTIONAL,
    protectedZoneLatitude   Latitude,
    protectedZoneLongitude  Longitude,
    protectedZoneRadius ProtectedZoneRadius OPTIONAL,
    protectedZoneID ProtectedZoneID OPTIONAL,
        ...
}
----------------------------------------------------------------------------- */

#pragma once

#include <etsi_its_cam_coding/cam_ProtectedCommunicationZone.h>
#include <etsi_its_cam_conversion/convertLatitude.h>
#include <etsi_its_cam_conversion/convertLongitude.h>
#include <etsi_its_cam_conversion/convertProtectedZoneID.h>
#include <etsi_its_cam_conversion/convertProtectedZoneRadius.h>
#include <etsi_its_cam_conversion/convertProtectedZoneType.h>
#include <etsi_its_cam_conversion/convertTimestampIts.h>
#include <etsi_its_cam_msgs/msg/protected_communication_zone.hpp>
namespace cam_msgs = etsi_its_cam_msgs::msg;


namespace etsi_its_cam_conversion {

void toRos_ProtectedCommunicationZone(const cam_ProtectedCommunicationZone_t& in, cam_msgs::ProtectedCommunicationZone& out) {
  toRos_ProtectedZoneType(in.protectedZoneType, out.protected_zone_type);
  if (in.expiryTime) {
    toRos_TimestampIts(*in.expiryTime, out.expiry_time);
    out.expiry_time_is_present = true;
  }
  toRos_Latitude(in.protectedZoneLatitude, out.protected_zone_latitude);
  toRos_Longitude(in.protectedZoneLongitude, out.protected_zone_longitude);
  if (in.protectedZoneRadius) {
    toRos_ProtectedZoneRadius(*in.protectedZoneRadius, out.protected_zone_radius);
    out.protected_zone_radius_is_present = true;
  }
  if (in.protectedZoneID) {
    toRos_ProtectedZoneID(*in.protectedZoneID, out.protected_zone_id);
    out.protected_zone_id_is_present = true;
  }
}

void toStruct_ProtectedCommunicationZone(const cam_msgs::ProtectedCommunicationZone& in, cam_ProtectedCommunicationZone_t& out) {
  memset(&out, 0, sizeof(cam_ProtectedCommunicationZone_t));
  toStruct_ProtectedZoneType(in.protected_zone_type, out.protectedZoneType);
  if (in.expiry_time_is_present) {
    out.expiryTime = (cam_TimestampIts_t*) calloc(1, sizeof(cam_TimestampIts_t));
    toStruct_TimestampIts(in.expiry_time, *out.expiryTime);
  }
  toStruct_Latitude(in.protected_zone_latitude, out.protectedZoneLatitude);
  toStruct_Longitude(in.protected_zone_longitude, out.protectedZoneLongitude);
  if (in.protected_zone_radius_is_present) {
    out.protectedZoneRadius = (cam_ProtectedZoneRadius_t*) calloc(1, sizeof(cam_ProtectedZoneRadius_t));
    toStruct_ProtectedZoneRadius(in.protected_zone_radius, *out.protectedZoneRadius);
  }
  if (in.protected_zone_id_is_present) {
    out.protectedZoneID = (cam_ProtectedZoneID_t*) calloc(1, sizeof(cam_ProtectedZoneID_t));
    toStruct_ProtectedZoneID(in.protected_zone_id, *out.protectedZoneID);
  }
}

}
