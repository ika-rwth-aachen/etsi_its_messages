/** ============================================================================
MIT License

Copyright (c) 2023-2025 Institute for Automotive Engineering (ika), RWTH Aachen University

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
============================================================================= */

/** Auto-generated by https://github.com/ika-rwth-aachen/etsi_its_messages -----
python3 \
  utils/codegen/codegen-py/asn1ToConversionHeader.py \
  asn1/raw/cam_ts103900/CAM-PDU-Descriptions.asn \
  asn1/patched/cam_ts103900/cdd/ETSI-ITS-CDD.asn \
  -t \
  cam_ts \
  -o \
  etsi_its_conversion/etsi_its_cam_ts_conversion/include/etsi_its_cam_ts_conversion
----------------------------------------------------------------------------- */

/** ASN.1 Definition -----------------------------------------------------------
*
* This type contains detaild information of the Basic Vehicle Container High Frequency.
*
* It shall include the following components:
*
* @field heading: It represent the heading and heading accuracy of the vehicle movement of the originating ITS-S with regards to the true north. 
* The heading accuracy provided in the heading Confidence value shall provide the accuracy of the measured vehicle heading with a confidence level 
* of 95 %. Otherwise, the value of the headingConfidence shall be set to unavailable.
*
* @field speed: It represent driving speed and speed accuracy of the originating ITS-S. The speed accuracy provided in the speedConfidence shall 
* provide the accuracy of the speed value with a confidence level of 95 %. Otherwise, the speedConfidence shall be set to unavailable.
*
* @field driveDirection: This component represent the vehicle drive direction (forward or backward) of the originating ITS-S.
*
* @field vehicleLength: This component represent the vehicle length value and vehicle length confidence indication of the vehicle ITS-S that 
* originate the CAM. 
*
* @field vehicleWidth: This component represents the Vehicle Width of the vehicle ITS-S that originates the CAM excluding side mirrors and possible
* similar extensions.
*
* @field longitudinalAcceleration: It represent the vehicle Longitudinal Acceleration of the originating ITS-S in the centre of the mass of the 
* empty vehicle. It shall include the measured vehicle longitudinal acceleration and its accuracy value with the confidence level of 95 %. 
* Otherwise, the longitudinalAccelerationConfidence shall be set to unavailable. 
*
* @field curvature: this component reppresent the actual trajectory of the vehicle. 
*
* @field curvatureCalculationMode: It indicates whether vehicle yaw-rate is used in the calculation of the curvature of the vehicle ITS-S that
* originates the CAM.
*
* @field yawRate: It denotes the vehicle rotation around the centre of mass of the empty vehicle. The leading sign denotes the direction of 
* rotation. The value is negative if the motion is clockwise when viewing from the top.
* yawRateConfidence denotes the accuracy for the 95 % confidence level for the measured yawRateValue. Otherwise, the value of yawRateConfidence
* shall be set to unavailable.
*
* @field accelerationControl: an optional component which represents the current status of the vehcile mechnanisms controlling the longitudinal movement of the vehcile ITS-S
* (e.g. brake pedal,  gas pedal, etc. engaged) that originate the CAM.
*
* @field lanePosition: an optional component which represents the lanePosition of the referencePosition of a vehicle. This component shall be present if the data is 
* available at the originating ITS-S.
*
* @field steeringWheelAngle: an optional component which indicates the steering wheel angle and accuracy as measured at the vehicle ITS-S that originates the CAM.
*
* @field lateralAcceleration: an optional component which represents the vehicle lateral acceleration of the originating ITS-S in the centre of the mass of the empty vehicle. 
* It shall include the measured vehicle lateral acceleration and its accuracy value with the confidence level of 95%.
*
* @field verticalAcceleration: an optional component which indicates the originating ITS-S in the centre of the mass of the empty vehicle.
* 
* @field performanceClass: an optional component characterizes the maximum age of the CAM data elements with regard to the generation delta time.
*
* @field cenDsrcTollingZone: an optional component which represents the information about the position of a CEN DSRC Tolling Station operating in the 5,8 GHz frequency band.
*
BasicVehicleContainerHighFrequency ::= SEQUENCE {
	heading Heading,
	speed Speed,
	driveDirection DriveDirection,
	vehicleLength VehicleLength,
	vehicleWidth VehicleWidth,
	longitudinalAcceleration AccelerationComponent,
	curvature Curvature,
	curvatureCalculationMode CurvatureCalculationMode,
	yawRate YawRate,
	accelerationControl AccelerationControl OPTIONAL,
	lanePosition LanePosition OPTIONAL,
	steeringWheelAngle SteeringWheelAngle OPTIONAL,
	lateralAcceleration AccelerationComponent OPTIONAL,
	verticalAcceleration AccelerationComponent OPTIONAL,
	performanceClass PerformanceClass OPTIONAL,
	cenDsrcTollingZone CenDsrcTollingZone OPTIONAL
}
----------------------------------------------------------------------------- */

#pragma once

#include <etsi_its_cam_ts_coding/cam_ts_BasicVehicleContainerHighFrequency.h>
#include <etsi_its_cam_ts_conversion/convertAccelerationComponent.h>
#include <etsi_its_cam_ts_conversion/convertAccelerationControl.h>
#include <etsi_its_cam_ts_conversion/convertCenDsrcTollingZone.h>
#include <etsi_its_cam_ts_conversion/convertCurvature.h>
#include <etsi_its_cam_ts_conversion/convertCurvatureCalculationMode.h>
#include <etsi_its_cam_ts_conversion/convertDriveDirection.h>
#include <etsi_its_cam_ts_conversion/convertHeading.h>
#include <etsi_its_cam_ts_conversion/convertLanePosition.h>
#include <etsi_its_cam_ts_conversion/convertPerformanceClass.h>
#include <etsi_its_cam_ts_conversion/convertSpeed.h>
#include <etsi_its_cam_ts_conversion/convertSteeringWheelAngle.h>
#include <etsi_its_cam_ts_conversion/convertVehicleLength.h>
#include <etsi_its_cam_ts_conversion/convertVehicleWidth.h>
#include <etsi_its_cam_ts_conversion/convertYawRate.h>
#include <etsi_its_cam_ts_msgs/msg/basic_vehicle_container_high_frequency.hpp>
namespace cam_ts_msgs = etsi_its_cam_ts_msgs::msg;


namespace etsi_its_cam_ts_conversion {

void toRos_BasicVehicleContainerHighFrequency(const cam_ts_BasicVehicleContainerHighFrequency_t& in, cam_ts_msgs::BasicVehicleContainerHighFrequency& out) {
  toRos_Heading(in.heading, out.heading);
  toRos_Speed(in.speed, out.speed);
  toRos_DriveDirection(in.driveDirection, out.drive_direction);
  toRos_VehicleLength(in.vehicleLength, out.vehicle_length);
  toRos_VehicleWidth(in.vehicleWidth, out.vehicle_width);
  toRos_AccelerationComponent(in.longitudinalAcceleration, out.longitudinal_acceleration);
  toRos_Curvature(in.curvature, out.curvature);
  toRos_CurvatureCalculationMode(in.curvatureCalculationMode, out.curvature_calculation_mode);
  toRos_YawRate(in.yawRate, out.yaw_rate);
  if (in.accelerationControl) {
    toRos_AccelerationControl(*in.accelerationControl, out.acceleration_control);
    out.acceleration_control_is_present = true;
  }
  if (in.lanePosition) {
    toRos_LanePosition(*in.lanePosition, out.lane_position);
    out.lane_position_is_present = true;
  }
  if (in.steeringWheelAngle) {
    toRos_SteeringWheelAngle(*in.steeringWheelAngle, out.steering_wheel_angle);
    out.steering_wheel_angle_is_present = true;
  }
  if (in.lateralAcceleration) {
    toRos_AccelerationComponent(*in.lateralAcceleration, out.lateral_acceleration);
    out.lateral_acceleration_is_present = true;
  }
  if (in.verticalAcceleration) {
    toRos_AccelerationComponent(*in.verticalAcceleration, out.vertical_acceleration);
    out.vertical_acceleration_is_present = true;
  }
  if (in.performanceClass) {
    toRos_PerformanceClass(*in.performanceClass, out.performance_class);
    out.performance_class_is_present = true;
  }
  if (in.cenDsrcTollingZone) {
    toRos_CenDsrcTollingZone(*in.cenDsrcTollingZone, out.cen_dsrc_tolling_zone);
    out.cen_dsrc_tolling_zone_is_present = true;
  }
}

void toStruct_BasicVehicleContainerHighFrequency(const cam_ts_msgs::BasicVehicleContainerHighFrequency& in, cam_ts_BasicVehicleContainerHighFrequency_t& out) {
  memset(&out, 0, sizeof(cam_ts_BasicVehicleContainerHighFrequency_t));
  toStruct_Heading(in.heading, out.heading);
  toStruct_Speed(in.speed, out.speed);
  toStruct_DriveDirection(in.drive_direction, out.driveDirection);
  toStruct_VehicleLength(in.vehicle_length, out.vehicleLength);
  toStruct_VehicleWidth(in.vehicle_width, out.vehicleWidth);
  toStruct_AccelerationComponent(in.longitudinal_acceleration, out.longitudinalAcceleration);
  toStruct_Curvature(in.curvature, out.curvature);
  toStruct_CurvatureCalculationMode(in.curvature_calculation_mode, out.curvatureCalculationMode);
  toStruct_YawRate(in.yaw_rate, out.yawRate);
  if (in.acceleration_control_is_present) {
    out.accelerationControl = (cam_ts_AccelerationControl_t*) calloc(1, sizeof(cam_ts_AccelerationControl_t));
    toStruct_AccelerationControl(in.acceleration_control, *out.accelerationControl);
  }
  if (in.lane_position_is_present) {
    out.lanePosition = (cam_ts_LanePosition_t*) calloc(1, sizeof(cam_ts_LanePosition_t));
    toStruct_LanePosition(in.lane_position, *out.lanePosition);
  }
  if (in.steering_wheel_angle_is_present) {
    out.steeringWheelAngle = (cam_ts_SteeringWheelAngle_t*) calloc(1, sizeof(cam_ts_SteeringWheelAngle_t));
    toStruct_SteeringWheelAngle(in.steering_wheel_angle, *out.steeringWheelAngle);
  }
  if (in.lateral_acceleration_is_present) {
    out.lateralAcceleration = (cam_ts_AccelerationComponent_t*) calloc(1, sizeof(cam_ts_AccelerationComponent_t));
    toStruct_AccelerationComponent(in.lateral_acceleration, *out.lateralAcceleration);
  }
  if (in.vertical_acceleration_is_present) {
    out.verticalAcceleration = (cam_ts_AccelerationComponent_t*) calloc(1, sizeof(cam_ts_AccelerationComponent_t));
    toStruct_AccelerationComponent(in.vertical_acceleration, *out.verticalAcceleration);
  }
  if (in.performance_class_is_present) {
    out.performanceClass = (cam_ts_PerformanceClass_t*) calloc(1, sizeof(cam_ts_PerformanceClass_t));
    toStruct_PerformanceClass(in.performance_class, *out.performanceClass);
  }
  if (in.cen_dsrc_tolling_zone_is_present) {
    out.cenDsrcTollingZone = (cam_ts_CenDsrcTollingZone_t*) calloc(1, sizeof(cam_ts_CenDsrcTollingZone_t));
    toStruct_CenDsrcTollingZone(in.cen_dsrc_tolling_zone, *out.cenDsrcTollingZone);
  }
}

}
