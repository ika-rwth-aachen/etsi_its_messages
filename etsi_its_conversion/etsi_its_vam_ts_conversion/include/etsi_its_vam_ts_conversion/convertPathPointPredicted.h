/** ============================================================================
MIT License

Copyright (c) 2023-2025 Institute for Automotive Engineering (ika), RWTH Aachen University

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
============================================================================= */

/** Auto-generated by https://github.com/ika-rwth-aachen/etsi_its_messages -----
python3 \
  utils/codegen/codegen-py/asn1ToConversionHeader.py \
  asn1/raw/vam-ts103300_3/VAM-PDU-Descriptions.asn \
  asn1/patched/vam-ts103300_3/cdd/ETSI-ITS-CDD.asn \
  -t \
  vam_ts \
  -o \
  etsi_its_conversion/etsi_its_vam_ts_conversion/include/etsi_its_vam_ts_conversion
----------------------------------------------------------------------------- */

/** ASN.1 Definition -----------------------------------------------------------
*
 * This DF  defines a predicted offset waypoint position within a path.
 *
 * It shall include the following components: 
 *
 * @field deltaLatitude: an offset latitude with regards to a pre-defined reference position. 
 *
 * @field deltaLongitude: an offset longitude with regards to a pre-defined reference position. 
 * 
 * @field horizontalPositionConfidence: the confidence value associated to the horizontal geographical position.
 *
 * @field deltaAltitude: an offset altitude with regards to a pre-defined reference position. 
 *
 * @field altitudeConfidence: the confidence value associated to the altitude value of the geographical position.
 * 
 * @field pathDeltaTime: The  travel time separated from the waypoint to the predefined reference position.
 *
 * @category GeoReference information
 * @revision: semantics updated in V2.1.1
 *
PathPointPredicted::= SEQUENCE {
  deltaLatitude                 DeltaLatitude,      
  deltaLongitude                DeltaLongitude, 
  horizontalPositionConfidence  PosConfidenceEllipse OPTIONAL,   
  deltaAltitude                 DeltaAltitude DEFAULT unavailable, 
  altitudeConfidence            AltitudeConfidence DEFAULT unavailable,
  pathDeltaTime                 DeltaTimeTenthOfSecond,
  ... 
}
----------------------------------------------------------------------------- */

#pragma once

#include <etsi_its_vam_ts_coding/vam_ts_PathPointPredicted.h>
#include <etsi_its_vam_ts_conversion/convertAltitudeConfidence.h>
#include <etsi_its_vam_ts_conversion/convertDeltaAltitude.h>
#include <etsi_its_vam_ts_conversion/convertDeltaLatitude.h>
#include <etsi_its_vam_ts_conversion/convertDeltaLongitude.h>
#include <etsi_its_vam_ts_conversion/convertDeltaTimeTenthOfSecond.h>
#include <etsi_its_vam_ts_conversion/convertPosConfidenceEllipse.h>
#include <etsi_its_vam_ts_msgs/msg/path_point_predicted.hpp>
namespace vam_ts_msgs = etsi_its_vam_ts_msgs::msg;


namespace etsi_its_vam_ts_conversion {

void toRos_PathPointPredicted(const vam_ts_PathPointPredicted_t& in, vam_ts_msgs::PathPointPredicted& out) {
  toRos_DeltaLatitude(in.deltaLatitude, out.delta_latitude);
  toRos_DeltaLongitude(in.deltaLongitude, out.delta_longitude);
  if (in.horizontalPositionConfidence) {
    toRos_PosConfidenceEllipse(*in.horizontalPositionConfidence, out.horizontal_position_confidence);
    out.horizontal_position_confidence_is_present = true;
  }
  if (in.deltaAltitude) {
    toRos_DeltaAltitude(*in.deltaAltitude, out.delta_altitude);
  }
  if (in.altitudeConfidence) {
    toRos_AltitudeConfidence(*in.altitudeConfidence, out.altitude_confidence);
  }
  toRos_DeltaTimeTenthOfSecond(in.pathDeltaTime, out.path_delta_time);
}

void toStruct_PathPointPredicted(const vam_ts_msgs::PathPointPredicted& in, vam_ts_PathPointPredicted_t& out) {
  memset(&out, 0, sizeof(vam_ts_PathPointPredicted_t));
  toStruct_DeltaLatitude(in.delta_latitude, out.deltaLatitude);
  toStruct_DeltaLongitude(in.delta_longitude, out.deltaLongitude);
  if (in.horizontal_position_confidence_is_present) {
    out.horizontalPositionConfidence = (vam_ts_PosConfidenceEllipse_t*) calloc(1, sizeof(vam_ts_PosConfidenceEllipse_t));
    toStruct_PosConfidenceEllipse(in.horizontal_position_confidence, *out.horizontalPositionConfidence);
  }
  out.deltaAltitude = (vam_ts_DeltaAltitude_t*) calloc(1, sizeof(vam_ts_DeltaAltitude_t));
  toStruct_DeltaAltitude(in.delta_altitude, *out.deltaAltitude);
  out.altitudeConfidence = (vam_ts_AltitudeConfidence_t*) calloc(1, sizeof(vam_ts_AltitudeConfidence_t));
  toStruct_AltitudeConfidence(in.altitude_confidence, *out.altitudeConfidence);
  toStruct_DeltaTimeTenthOfSecond(in.path_delta_time, out.pathDeltaTime);
}

}
