/** ============================================================================
MIT License

Copyright (c) 2023-2025 Institute for Automotive Engineering (ika), RWTH Aachen University

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
============================================================================= */

/** Auto-generated by https://github.com/ika-rwth-aachen/etsi_its_messages -----
python3 \
  utils/codegen/codegen-py/asn1ToConversionHeader.py \
  asn1/raw/vam-ts103300_3/VAM-PDU-Descriptions.asn \
  asn1/patched/vam-ts103300_3/cdd/ETSI-ITS-CDD.asn \
  -t \
  vam_ts \
  -o \
  etsi_its_conversion/etsi_its_vam_ts_conversion/include/etsi_its_vam_ts_conversion
----------------------------------------------------------------------------- */

/** ASN.1 Definition -----------------------------------------------------------
 *
 * @details VruMotionPredictionContainer
 * The VRU Motion Prediction container of the VAM carries the past and future motion state information of the VRU.
 * It includes the following components (setting indications are specified in clause 7.3.6 of TS 103 300-3). 
 * At least one of the fields below shall be present if the container is present in the VAM: 
 *
 * @field pathHistory: represents the VRU's recent movement over some past time and/or distance. 
 *        It consists of a list of path points. 
 * @field pathPrediction: provides the set of predicted locations of the ITS-S, confidence values 
 *        and the corresponding future time instants. 
 * @field safeDistance: provides indication of safe distance between an ego-VRU and up to 8 other ITS-S 
 *        or entity on the road to indicate whether the ego-VRU is at a safe distance (that is less likely to 
 *        physically collide) from another ITS-S or entity on the road. 
 * @field trajectoryInterceptionIndication: provides the indication for possible trajectory interception 
 *        with up to 8 VRUs or other objects on the road.. 
 * @field accelerationChangeIndication: provides an acceleration change indication of the VRU. 
 *        When present this DF indicates an anticipated change in the VRU speed for period of actionDeltaTime.
 * @field headingChangeIndication: provides additional data elements associated to heading change indicators 
 *        such as a change of travel direction (left or right). 
 *        The direction change action is performed for a period of actionDeltaTime. 
 * @field stabilityChangeIndication: provides an estimation of the VRU stability. 
 * 
 * @category: GeoReference information, VRU information
 * @revision: V2.2.1
 *
    VruMotionPredictionContainer ::= SEQUENCE {
        pathHistory                      PathHistory OPTIONAL,
        pathPrediction                   PathPredicted OPTIONAL,  
        safeDistance                     SequenceOfSafeDistanceIndication OPTIONAL,
        trajectoryInterceptionIndication SequenceOfTrajectoryInterceptionIndication OPTIONAL,
        accelerationChangeIndication     AccelerationChangeIndication OPTIONAL,
        headingChangeIndication          HeadingChangeIndication OPTIONAL,
        stabilityChangeIndication        StabilityChangeIndication OPTIONAL,
        ...
    }
----------------------------------------------------------------------------- */

#pragma once

#include <etsi_its_vam_ts_coding/vam_ts_VruMotionPredictionContainer.h>
#include <etsi_its_vam_ts_conversion/convertAccelerationChangeIndication.h>
#include <etsi_its_vam_ts_conversion/convertHeadingChangeIndication.h>
#include <etsi_its_vam_ts_conversion/convertPathHistory.h>
#include <etsi_its_vam_ts_conversion/convertPathPredicted.h>
#include <etsi_its_vam_ts_conversion/convertSequenceOfSafeDistanceIndication.h>
#include <etsi_its_vam_ts_conversion/convertSequenceOfTrajectoryInterceptionIndication.h>
#include <etsi_its_vam_ts_conversion/convertStabilityChangeIndication.h>
#include <etsi_its_vam_ts_msgs/msg/vru_motion_prediction_container.hpp>
namespace vam_ts_msgs = etsi_its_vam_ts_msgs::msg;


namespace etsi_its_vam_ts_conversion {

void toRos_VruMotionPredictionContainer(const vam_ts_VruMotionPredictionContainer_t& in, vam_ts_msgs::VruMotionPredictionContainer& out) {
  if (in.pathHistory) {
    toRos_PathHistory(*in.pathHistory, out.path_history);
    out.path_history_is_present = true;
  }
  if (in.pathPrediction) {
    toRos_PathPredicted(*in.pathPrediction, out.path_prediction);
    out.path_prediction_is_present = true;
  }
  if (in.safeDistance) {
    toRos_SequenceOfSafeDistanceIndication(*in.safeDistance, out.safe_distance);
    out.safe_distance_is_present = true;
  }
  if (in.trajectoryInterceptionIndication) {
    toRos_SequenceOfTrajectoryInterceptionIndication(*in.trajectoryInterceptionIndication, out.trajectory_interception_indication);
    out.trajectory_interception_indication_is_present = true;
  }
  if (in.accelerationChangeIndication) {
    toRos_AccelerationChangeIndication(*in.accelerationChangeIndication, out.acceleration_change_indication);
    out.acceleration_change_indication_is_present = true;
  }
  if (in.headingChangeIndication) {
    toRos_HeadingChangeIndication(*in.headingChangeIndication, out.heading_change_indication);
    out.heading_change_indication_is_present = true;
  }
  if (in.stabilityChangeIndication) {
    toRos_StabilityChangeIndication(*in.stabilityChangeIndication, out.stability_change_indication);
    out.stability_change_indication_is_present = true;
  }
}

void toStruct_VruMotionPredictionContainer(const vam_ts_msgs::VruMotionPredictionContainer& in, vam_ts_VruMotionPredictionContainer_t& out) {
  memset(&out, 0, sizeof(vam_ts_VruMotionPredictionContainer_t));
  if (in.path_history_is_present) {
    out.pathHistory = (vam_ts_PathHistory_t*) calloc(1, sizeof(vam_ts_PathHistory_t));
    toStruct_PathHistory(in.path_history, *out.pathHistory);
  }
  if (in.path_prediction_is_present) {
    out.pathPrediction = (vam_ts_PathPredicted_t*) calloc(1, sizeof(vam_ts_PathPredicted_t));
    toStruct_PathPredicted(in.path_prediction, *out.pathPrediction);
  }
  if (in.safe_distance_is_present) {
    out.safeDistance = (vam_ts_SequenceOfSafeDistanceIndication_t*) calloc(1, sizeof(vam_ts_SequenceOfSafeDistanceIndication_t));
    toStruct_SequenceOfSafeDistanceIndication(in.safe_distance, *out.safeDistance);
  }
  if (in.trajectory_interception_indication_is_present) {
    out.trajectoryInterceptionIndication = (vam_ts_SequenceOfTrajectoryInterceptionIndication_t*) calloc(1, sizeof(vam_ts_SequenceOfTrajectoryInterceptionIndication_t));
    toStruct_SequenceOfTrajectoryInterceptionIndication(in.trajectory_interception_indication, *out.trajectoryInterceptionIndication);
  }
  if (in.acceleration_change_indication_is_present) {
    out.accelerationChangeIndication = (vam_ts_AccelerationChangeIndication_t*) calloc(1, sizeof(vam_ts_AccelerationChangeIndication_t));
    toStruct_AccelerationChangeIndication(in.acceleration_change_indication, *out.accelerationChangeIndication);
  }
  if (in.heading_change_indication_is_present) {
    out.headingChangeIndication = (vam_ts_HeadingChangeIndication_t*) calloc(1, sizeof(vam_ts_HeadingChangeIndication_t));
    toStruct_HeadingChangeIndication(in.heading_change_indication, *out.headingChangeIndication);
  }
  if (in.stability_change_indication_is_present) {
    out.stabilityChangeIndication = (vam_ts_StabilityChangeIndication_t*) calloc(1, sizeof(vam_ts_StabilityChangeIndication_t));
    toStruct_StabilityChangeIndication(in.stability_change_indication, *out.stabilityChangeIndication);
  }
}

}
